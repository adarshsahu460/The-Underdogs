generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  role         Role      @default(USER)
  passwordHash String?   // legacy; can be removed once fully on Clerk
  clerkUserId  String?   @unique
  projects     Project[] @relation("UserProjects")
  adoptions    Adoption[]
  contributions Contribution[]
  contributionSessions ContributionSession[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Project {
  id                String      @id @default(cuid())
  title             String?
  name              String?     // legacy / optional
  description       String?
  originalRepoUrl   String?
  repoUrl           String?
  botRepoFullName   String? @unique
  owner             User        @relation("UserProjects", fields: [ownerUserId], references: [id])
  ownerUserId       String
  category          String?
  languages         String?
  reasonHalted      String?
  documentationUrl  String?
  demoUrl           String?
  s3ObjectKey       String?
  s3ObjectUrl       String?
  sourceType        String?
  keywords          String?
  aiSummary         String?
  aiNextSteps       String?
  aiHealth          String?
  aiLastGeneratedAt DateTime?
  searchVector      String?     // For full-text search (tsvector in PostgreSQL)
  adoptions         Adoption[]
  aiReports         AiReport[]
  contributions     Contribution[]
  snapshots         ProjectSummarySnapshot[]
  sessions          ContributionSession[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  @@index([ownerUserId])
}

model Adoption {
  id             String   @id @default(cuid())
  adopter        User     @relation(fields: [adopterUserId], references: [id])
  adopterUserId  String
  project        Project  @relation(fields: [projectId], references: [id])
  projectId      String
  forkFullName   String?
  status         String   @default("PENDING")
  createdAt      DateTime @default(now())

  @@unique([adopterUserId, projectId])
  @@index([projectId])
}

model AiReport {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  kind      String?  @default("analysis")
  report    Json
  createdAt DateTime @default(now())

  @@index([projectId])
}

model Contribution {
  id                    String   @id @default(cuid())
  project               Project  @relation(fields: [projectId], references: [id])
  projectId             String
  contributor           User?    @relation(fields: [contributorUserId], references: [id])
  contributorUserId     String?
  baseCommit            String
  headCommit            String
  diffTruncated         String   // stored truncated diff
  diffSize              Int
  aiContributionSummary String?
  aiNextSteps           String?
  aiUpdatedProjectSummary String?
  createdAt             DateTime @default(now())

  snapshot ProjectSummarySnapshot?
  session  ContributionSession?

  @@index([projectId])
  @@index([contributorUserId])
}

model ProjectSummarySnapshot {
  id              String   @id @default(cuid())
  project         Project  @relation(fields: [projectId], references: [id])
  projectId       String
  contribution    Contribution @relation(fields: [contributionId], references: [id])
  contributionId  String @unique
  previousSummary String?
  newSummary      String?
  createdAt       DateTime @default(now())

  @@index([projectId])
}

model ContributionSession {
  id                   String        @id @default(cuid())
  project              Project       @relation(fields: [projectId], references: [id])
  projectId            String
  contributor          User?         @relation(fields: [contributorUserId], references: [id])
  contributorUserId    String?
  baseCommit           String
  idempotencyKey       String
  manifestVersion      Int           @default(1)
  archiveObjectKey     String?
  status               String        @default("PENDING") // PENDING, DOWNLOADED, UPLOADED, DIFFED, AI_PROCESSED, FINAL, FAILED
  failureReason        String?
  resultContribution   Contribution? @relation(fields: [resultContributionId], references: [id])
  resultContributionId String?       @unique
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  @@unique([projectId, idempotencyKey])
  @@index([projectId])
  @@index([contributorUserId])
}